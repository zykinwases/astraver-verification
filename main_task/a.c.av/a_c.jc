
axiomatic Padding {

  logic type padding
  
}

axiomatic Memory_reinterpretation_predicates {

  predicate uint8_as_uint32(uint32 d0, uint8 a0, uint8 a1, uint8 a2, uint8 a3) =
  ((d0 == ((((((a3 * 256) + a2) * 256) + a1) * 256) + a0)) &&
    \uint8_as_uint32(d0, a0, a1, a2, a3))
   
  logic uint32 complement_to_uint32(int32 v) =
  (if (v >= 0) then (v :> uint32) else (((v :> integer) + 4294967296) :> uint32))
   
  predicate uint8_as_int32(int32 d0, uint8 a3, uint8 a2, uint8 a1, uint8 a0) =
  (uint8_as_uint32(complement_to_uint32(d0), a3, a2, a1, a0) &&
    \uint8_as_int32(d0, a3, a2, a1, a0))
   
  predicate uint32_as_uint8(uint32 d0, uint8 a0, uint8 a1, uint8 a2, uint8 a3) =
  (((a0 == (d0 % 256)) &&
     (let d1 = (d0 / 256)
     in ((a1 == (d1 % 256)) &&
          (let d2 = (d1 / 256)
          in ((a2 == (d2 % 256)) && (let d3 = (d2 / 256) in (a3 == d3))))))) &&
    \uint32_as_uint8(d0, a0, a1, a2, a3))
   
  predicate int32_as_uint8(int32 d0, uint8 a3, uint8 a2, uint8 a1, uint8 a0) =
  (uint32_as_uint8(complement_to_uint32(d0), a3, a2, a1, a0) &&
    \int32_as_uint8(d0, a3, a2, a1, a0))
   
  logic uint8 complement_to_uint8(int8 v) =
  (if (v >= 0) then (v :> uint8) else (((v :> integer) + 256) :> uint8))
   
  predicate int8_as_int32(int32 d0, int8 a3, int8 a2, int8 a1, int8 a0) =
  (uint8_as_int32(d0, complement_to_uint8(a3), complement_to_uint8(a2),
                  complement_to_uint8(a1), complement_to_uint8(a0)) &&
    \int8_as_int32(d0, a3, a2, a1, a0))
   
  predicate int32_as_int8(int32 d0, int8 a3, int8 a2, int8 a1, int8 a0) =
  (int32_as_uint8(d0, complement_to_uint8(a3), complement_to_uint8(a2),
                  complement_to_uint8(a1), complement_to_uint8(a0)) &&
    \int32_as_int8(d0, a3, a2, a1, a0))
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag intP = voidP with {
  int32 intM: 32;
}

unit increment(intP[..] p)
  requires ((_C_7 : \at((((\offset_min(\at(p,Here)) <= \at(0,Here)) &&
                           (\offset_max(\at(p,Here)) >= \at(0,Here))) &&
                          true),Here)) &&
             (_C_8 : (p.intM < (0x7fffffff :> int32))));
behavior default:
  ensures (_C_6 : ((\at(p,Old).intM :> integer) ==
                    ((\at(p.intM,Old) :> integer) + 1)));
{  
   {  (_C_5 : ((_C_4 : p.intM) = (_C_3 : ((_C_2 : ((_C_1 : p.intM) +
                                                    (1 :> int32))) :> int32))));
      
      (return ())
   }
}

int32 main()
behavior default:
  ensures true;
{  
   (var intP[0] i);
   
   (var int32 __retres);
   
   {  (_C_10 : (i = (_C_9 : (new intP[1]))));
      (_C_12 : ((_C_11 : i.intM) = (0 :> int32)));
      (_C_13 : increment(i));
      
      {  
         (assert for default: (_C_14 : (astraver : (i.intM == (1 :> int32)))));
         ()
      };
      (_C_15 : (__retres = (0 :> int32)));
      (_C_16 : (free(i)));
      
      (return __retres)
   }
}

int32 norm_main()
behavior default:
  ensures true;
{  
   (var intP[..] i_0);
   
   (var int32 __retres_0);
   
   {  (_C_18 : (i_0 = (_C_17 : (new intP[1]))));
      (_C_20 : ((_C_19 : i_0.intM) = (0 :> int32)));
      (_C_21 : increment(i_0));
      
      {  
         (assert for default: (_C_22 : (astraver : (i_0.intM == (1 :> int32)))));
         ()
      };
      (_C_23 : (free(i_0)));
      
      {  
         (assert for default: (_C_24 : (astraver : (missing_return : false))));
         ()
      };
      (_C_25 : (__retres_0 = (0 :> int32)));
      
      (return __retres_0)
   }
}
