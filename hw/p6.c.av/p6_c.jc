
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

int32 replace(intP[..] a, int32 size_1, int32 x, int32 y)
  requires ((_C_26 : (size_1 >= (0 :> int32))) &&
             (_C_27 : \at((if (\at(0,Here) <=
                                \at(((size_1 :> integer) - 1),Here)) then 
                          (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                             (\offset_max(\at(a,Here)) >=
                               \at(((size_1 :> integer) - 1),Here))) &&
                            (\forall integer __framac_tmp1;
                              (((\at(0,Here) <= __framac_tmp1) &&
                                 (__framac_tmp1 <=
                                   \at(((size_1 :> integer) - 1),Here))) ==>
                                true))) else true),Here)));
behavior default:
  assigns (a + [0..((size_1 :> integer) - 1)]).intM;
  allocates \at(a,Old);
  ensures (_C_21 : ((_C_22 : (\result == (0 :> int32))) &&
                     ((_C_24 : (\forall integer i;
                                 ((((0 <= i) &&
                                     (i < (\at(size_1,Old) :> integer))) &&
                                    (\at((a + i).intM,Old) == \at(x,Old))) ==>
                                   ((\at(a,Old) + i).intM == \at(y,Old))))) &&
                       (_C_25 : (\forall integer i_0;
                                  ((((0 <= i_0) &&
                                      (i_0 < (\at(size_1,Old) :> integer))) &&
                                     (! (\at((a + i_0).intM,Old) ==
                                          \at(x,Old)))) ==>
                                    ((\at(a,Old) + i_0).intM ==
                                      \at((a + i_0).intM,Old))))))));
{  
   (var int32 i);
   
   (var int32 __retres);
   
   {  
      {  (_C_1 : (i = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_7 : ((_C_8 : ((0 :> int32) <= i)) &&
                               (_C_9 : (i <= size_1))));
         behavior default:
           invariant (_C_6 : (a == (\at(a,Pre) + (i :> integer))));
         behavior default:
           invariant (_C_5 : (\forall integer j;
                               ((((0 <= j) && (j < (i :> integer))) &&
                                  (\at((a + j).intM,Pre) == x)) ==>
                                 ((\at(a,Pre) + j).intM == y))));
         behavior default:
           invariant (_C_4 : (\forall integer j_0;
                               ((((0 <= j_0) && (j_0 < (i :> integer))) &&
                                  (! (\at((a + j_0).intM,Pre) == x))) ==>
                                 ((\at(a,Pre) + j_0).intM ==
                                   \at((a + j_0).intM,Pre)))));
         behavior default:
           invariant (_C_3 : (\forall integer j_1;
                               ((((i :> integer) <= j_1) &&
                                  (j_1 < (size_1 :> integer))) ==>
                                 (\at((a + j_1).intM,Pre) ==
                                   (\at(a,Pre) + j_1).intM))));
         behavior default:
           
           assigns (\at(a,Pre) + [0..((i :> integer) - 1)]).intM;
         variant (_C_2 : ((size_1 :> integer) - (i :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_10 : (i < size_1)) then () else 
                              (goto while_0_break)));
               
               {  (if (_C_14 : ((_C_13 : a.intM) == x)) then (_C_12 : (
                                                             (_C_11 : a.intM) = y)) else ());
                  (_C_16 : (a = (_C_15 : (a + (1 :> int32)))))
               };
               (_C_19 : (i = (_C_18 : ((_C_17 : (i + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break : ())
      };
      (_C_20 : (__retres = (0 :> int32)));
      
      (return __retres)
   }
}
